with 

report_date AS
        (SELECT
            DATE(report_date) AS report_date
        FROM
            ((SELECT sequence(current_date - interval '35' day, current_date - interval '1' day) bar)
        CROSS JOIN
            unnest (bar) as t(report_date)
        ))
        
, period AS
        (SELECT
            report_date
            , 'Weekly' AS period_group
            , 'W' || CAST(WEEK(report_date) AS VARCHAR) AS period
            , DATE_FORMAT(DATE_TRUNC('week', report_date) + interval '4' day, '%d-%b') AS explain_date
            , DENSE_RANK() OVER (ORDER BY DATE_TRUNC('week', report_date) DESC) AS no
            , 7.000000 AS days
        FROM
            report_date
        WHERE
            report_date BETWEEN  DATE_TRUNC('week', current_date) - interval '28' day AND  DATE_TRUNC('week', current_date) - interval '1' day
        
        UNION ALL
        
        SELECT
            report_date
            , 'Daily' AS period_group
            , DATE_FORMAT(report_date, '%Y-%m-%d') AS period
            , DATE_FORMAT(report_date, '%a') AS explain_date
            , DENSE_RANK() OVER (ORDER BY report_date DESC) AS no
            , 1.000000 AS days
        FROM report_date WHERE report_date between current_date - interval '15' day and  current_date - interval '1' day
        )

,ca_order as
        (
            SELECT base.*
            
            from
            (SELECT  a.order_uid
                    ,a.order_id
                    ,a.order_type      
                    ,case when a.order_type <> 200 then order_type else ogi.ref_order_category end as order_category                      
                    ,case when a.assign_type = 1 then '1. Single Assign'
                          when a.assign_type in (2,4) then '2. Multi Assign'
                          when a.assign_type = 3 then '3. Well-Stack Assign'
                          when a.assign_type = 5 then '4. Free Pick'
                          when a.assign_type = 6 then '5. Manual'
                          when a.assign_type in (7,8) then '6. New Stack Assign'
                          else null end as assign_type
                    
                    ,from_unixtime(a.create_time - 60*60) as create_time
                    ,from_unixtime(a.update_time - 60*60) as update_time
                    ,case when a.experiment_group in (5,6,7,8) then 1 else 0 end as is_ca
                    ,case when a.experiment_group in (3,4,7,8) then 1 else 0 end as is_auto_accepted
                    ,a.shipper_uid as shipper_id    
                
                
                from (SELECT concat(cast(order_id as VARCHAR),'-',cast(order_type as VARCHAR)) as order_uid, order_id, city_id, assign_type, update_time, create_time,status,order_type, experiment_group
                                  ,shipper_uid
                        from shopeefood.foody_partner_archive_db__order_assign_shipper_log_archive_tab__reg_daily_s0_live
                        where status in (3,4) -- shipper incharge
                
                        UNION
                    
                        SELECT concat(cast(order_id as VARCHAR),'-',cast(order_type as VARCHAR)) as order_uid, order_id, city_id, assign_type, update_time, create_time,status,order_type, experiment_group
                                  ,shipper_uid
                        from shopeefood.foody_partner_db__order_assign_shipper_log_tab__reg_daily_s0_live
                        where status in (3,4) -- shipper incharge
                    )a
                    
                    -- take last incharge
                    LEFT JOIN 
                            (SELECT concat(cast(order_id as VARCHAR),'-',cast(order_type as VARCHAR)) as order_uid, order_id, city_id, assign_type, update_time, create_time,status
                    
                            from shopeefood.foody_partner_archive_db__order_assign_shipper_log_archive_tab__reg_daily_s0_live
                            where status in (3,4) -- shipper incharge
                    
                            UNION
                        
                            SELECT concat(cast(order_id as VARCHAR),'-',cast(order_type as VARCHAR)) as order_uid, order_id, city_id, assign_type, update_time, create_time,status
                    
                            from shopeefood.foody_partner_db__order_assign_shipper_log_tab__reg_daily_s0_live
                            where status in (3,4) -- shipper incharge
                        )a_filter on a.order_uid = a_filter.order_uid and a.create_time < a_filter.create_time
                        
                     LEFT JOIN shopeefood.foody_partner_db__order_group_info_tab__reg_daily_s0_live ogi on ogi.id > 0 and ogi.id = case when a.order_type = 200 then a.order_id else 0 end
                
                where 1=1
                and a_filter.order_id is null -- take last incharge
                and date(from_unixtime(a.create_time - 60*60)) between current_date - interval '40' day AND current_date - interval '1' day
              --  and (order_type = 0 or (order_type = 200 and ogi.ref_order_category = 0))
                GROUP BY 1,2,3,4,5,6,7,8,9,10
                
                )base    

                where 1=1
            
        )

,raw_union as 
(
        (
        SELECT '1. Nowfood' as source, order_id, order_code, created_date, group_id, is_group_order, is_stack_order, is_valid_submit_to_del as is_valid_lt_e2e, is_valid_lt_incharge, lt_completion_original*1.0000 as lt_e2e, lt_incharge, order_type, is_asap, city_name, city_group, shipper_id
        FROM vnfdbi_opsndrivers.snp_foody_nowfood_order_raw_tab
        )

        UNION ALL 

        (
        SELECT '2. Nowship' as source, id as order_id, order_code, created_date, group_id, is_group_order, is_stacked as is_stack_order, is_valid_lt_e2e, is_valid_lt_incharge, lt_e2e, lt_incharge, order_type, is_asap, city_name, city_group, shipper_id
        FROM vnfdbi_opsndrivers.snp_foody_nowship_performance_tab 
        WHERE 1=1 and is_del = 1 and source is not null and city_id not in (238,469) and created_date between date(current_date) - interval '35' day and date(current_date) - interval '1' day
        )
)

, final_raw as 
(
SELECT t1.*
      ,coalesce(is_ca,0) is_ca 
      ,coalesce(is_auto_accepted,0) is_auto_accepted

FROM raw_union t1

LEFT JOIN ca_order t2 on t2.order_id = case when t1.is_group_order = 1 and t2.order_type = 200 then t1.group_id else t1.order_id end and t2.shipper_id = t1.shipper_id and t2.order_category = t1.order_type

)

,all_metrics as 

(SELECT
    IF(city_name IN ('HCM City', 'Ha Noi City', 'Da Nang City', 'Hai Phong City', 'Hue City', 'Can Tho City', 'Dong Nai', 'Vung Tau', 'Binh Duong'), city_name, 'OTH') AS city_group
    , city_name
    , source
    , created_date AS report_date
    
    , count(distinct order_code) AS delivered_orders
    , count(distinct case when is_ca = 1 then order_code else null end) AS ca_delivered_orders
    , count(distinct case when is_auto_accepted = 1 then order_code else null end) AS auto_accepted_delivered_orders
    , count(distinct case when is_auto_accepted = 1 and is_ca = 1 then order_code else null end) AS auto_accepted_ca_orders
    , count(distinct case when is_auto_accepted = 1 and is_ca = 0 then order_code else null end) AS auto_accepted_non_ca_orders

     --- for leadtime
    , count(distinct case when is_valid_lt_e2e = 1 and is_asap = 1 then order_code else null end) AS delivered_asap_orders
    , count(distinct case when is_valid_lt_e2e = 1 and is_ca = 1 and is_asap = 1 then order_code else null end) AS ca_delivered_asap_orders
    , count(distinct case when is_valid_lt_e2e = 1 and is_ca = 0 and is_asap = 1 then order_code else null end) AS non_ca_delivered_asap_orders
    
    , sum(case when is_valid_lt_e2e = 1 and is_asap = 1 then lt_e2e else 0 end) AS sum_lt_completion_delivered_asap_orders
    , sum(case when is_valid_lt_e2e = 1 and is_asap = 1 and is_ca = 1 then lt_e2e else 0 end) AS sum_lt_completion_ca_asap_orders  
    , sum(case when is_valid_lt_e2e = 1 and is_asap = 1 and is_ca = 0 then lt_e2e else 0 end) AS sum_lt_completion_non_ca_asap_orders 
    
    , sum(case when is_valid_lt_incharge = 1 and is_asap = 1 then lt_incharge else 0 end) AS sum_lt_incharge_delivered_asap_orders
    , sum(case when is_valid_lt_incharge = 1 and is_asap = 1 and is_ca = 1 then lt_incharge else 0 end) AS sum_lt_incharge_ca_asap_orders  
    , sum(case when is_valid_lt_incharge = 1 and is_asap = 1 and is_ca = 0 then lt_incharge else 0 end) AS sum_lt_incharge_non_ca_asap_orders      
    
FROM final_raw
WHERE 1=1
AND city_name NOT IN ('Phu Yen','Binh Dinh','Thanh Hoa','Dak Lak','Gia Lai','Ha Tinh')
AND created_date BETWEEN current_date - interval '35' day AND current_date - interval '1' day
GROUP BY 1,2,3,4
)
    
, time_metrics AS
(SELECT
      p.period_group
    , p.period
    , p.no
    , a.city_name as city_group
    , a.source
    , p.days
    , try(SUM(a.delivered_orders)*1.000000000 / p.days) AS delivered_orders
    , try(SUM(a.ca_delivered_orders)*1.000000000 / p.days) AS ca_delivered_orders
    , try(SUM(a.auto_accepted_delivered_orders)*1.000000000 / p.days) AS auto_accepted_delivered_orders
    , try(SUM(a.auto_accepted_ca_orders)*1.000000000 / p.days) AS auto_accepted_ca_orders
    , try(SUM(a.auto_accepted_non_ca_orders)*1.000000000 / p.days) AS auto_accepted_non_ca_orders
    
    , try(SUM(a.sum_lt_completion_delivered_asap_orders)*1.000000000/ SUM(a.delivered_asap_orders)) AS lt_completion_delivered_asap_orders
    , try(SUM(a.sum_lt_completion_ca_asap_orders)*1.000000000/ SUM(a.ca_delivered_asap_orders)) AS lt_completion_ca_asap_orders
    , try(SUM(a.sum_lt_completion_non_ca_asap_orders)*1.000000000/ SUM(a.non_ca_delivered_asap_orders)) AS lt_completion_non_ca_asap_orders
    
    , try(SUM(a.sum_lt_incharge_delivered_asap_orders)*1.000000000/ SUM(a.delivered_asap_orders)) AS lt_incharge_delivered_asap_orders
    , try(SUM(a.sum_lt_incharge_ca_asap_orders)*1.000000000/ SUM(a.ca_delivered_asap_orders)) AS lt_incharge_ca_asap_orders
    , try(SUM(a.sum_lt_incharge_non_ca_asap_orders)*1.000000000/ SUM(a.non_ca_delivered_asap_orders)) AS lt_incharge_non_ca_asap_orders 
    
FROM
    period p
LEFT JOIN
    all_metrics a
ON
    p.report_date = a.report_date
GROUP BY
    1,2,3,4,5,6
    )
SELECT * FROM  all_metrics