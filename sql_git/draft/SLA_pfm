select * 
from 
(SELECT base2.created_date
,base2.city_group
,base2.is_stack_order
,base2.created_hour
,count(distinct case when is_late_sla = 1 then base2.uid else null end) as total_late_sla_all
,count(distinct base2.uid) as total_order
FROM
(
SELECT
base1.uid
,base1.order_code
,case when base1.source = 'order_delivery' then 'NowFood' else 'NowShip' end as source
,base1.group_id
,base1.group_code
,base1.created_date
,base1.created_year_week
,base1.created_year_month
,base1.created_hour

,base1.city_group
,base1.city_name
,base1.district_name
,base1.order_status
,base1.is_asap
,base1.is_stack_order

,base1.created_timestamp
,base1.estimated_delivered_time
,base1.last_delivered_timestamp
,base1.last_picked_timestamp
,base1.max_arrived_at_merchant_timestamp
,base1.max_arrived_at_buyer_timestamp

,base1.lt_sla
,base1.lt_eta
,base1.lt_completion

,base1.lt_incharge
,base1.lt_assign_to_arrive_at_merchant
,base1.lt_incharge_to_arrive_at_merchant
,base1.lt_pick_to_arrive_at_buyer
,base1.lt_arrive_at_buyer_to_del
,base1.lt_arrive_at_merchant_to_pick

,case when base1.lt_completion > base1.lt_sla then 1 else 0 end as is_late_sla
,case when base1.lt_completion*60 - base1.lt_sla*60 is null then null
when base1.lt_completion*60 - base1.lt_sla*60 < -10*60 then '4. Early 10+ mins'
when base1.lt_completion*60 - base1.lt_sla*60 < -5*60 then '5. Early 5-10 mins'
when base1.lt_completion*60 - base1.lt_sla*60 <= 0*60 then '6. Early 0-5 mins'
when base1.lt_completion*60 - base1.lt_sla*60 <= 5*60 then '1. Late SLA 0-5 mins'
when base1.lt_completion*60 - base1.lt_sla*60 <= 10*60 then '2. Late SLA 5-10 mins'
when base1.lt_completion*60 - base1.lt_sla*60 <= 15*60 then '3. Late SLA 10 - 15 mins'
when base1.lt_completion*60 - base1.lt_sla*60 > 15*60 then '4. Late SLA 15+ mins'
else null end as range_lt_from_sla_to_actual_delivered

,base1.distance
,case when base1.distance <= 1 then '1. 0-1km'
when base1.distance <= 2 then '2. 1-2km'
when base1.distance <= 3 then '3. 2-3km'
when base1.distance <= 4 then '4. 3-4km'
when base1.distance <= 5 then '5. 4-5km'
when base1.distance <= 6 then '6. 5-6km'
when base1.distance <= 7 then '7. 6-7km'
when base1.distance <= 8 then '8. 7-8km'
when base1.distance <= 9 then '9. 8-9km'
when base1.distance <= 10 then '10. 9-10km'
when base1.distance > 10 then '11. 10km+'
else null end as distance_range


,base1.is_valid_incharge
,base1.is_valid_submit_to_del
,base1.is_valid_submit_to_eta
,base1.is_valid_lt_arrive_at_merchant
,base1.is_valid_lt_incharge_arrive_at_merchant
,base1.is_valid_lt_arrive_at_buyer
,base1.is_valid_lt_arrive_at_buyer_to_del
,base1.is_valid_lt_arrive_at_merchant_to_pick
,base1.is_valid_lt_merchant_prep

,base1.merchant_id
,base1.merchant_name
,base1.merchant_prep_time_actual
,coalesce(rain_mode.is_rain_negative,0) is_rain

FROM
(
SELECT base.shipper_id
,base.city_name
,base.city_group
,base.city_id
,base.district_id
,base.district_name
,base.report_date
,base.created_date
,base.created_year_week
,base.created_year_month
,date(base.inflow_timestamp) inflow_date

,base.order_id
,base.order_code
,concat(base.source,'_',cast(base.order_id as varchar)) as uid
,base.ref_order_category order_type
,base.source

,case when base.order_status = 400 then 'Delivered'
when base.order_status = 401 then 'Quit'
when base.order_status in (402,403,404) then 'Cancelled'
when base.order_status in (405) then 'Returned'
else 'Others' end as order_status

,base.order_status_group
,base.is_stack is_stack_order
,base.group_code
,base.group_id

,base.created_timestamp
,base.first_auto_assign_timestamp
,base.last_delivered_timestamp
,base.estimated_delivered_time
,base.last_picked_timestamp
,base.max_arrived_at_merchant_timestamp
,base.max_arrived_at_buyer_timestamp
,base.inflow_timestamp
,date_format(base.inflow_timestamp,'%a') inflow_day_of_week

,EXTRACT(HOUR from base.created_timestamp) created_hour
,EXTRACT(HOUR from base.inflow_timestamp) inflow_hour
,case when EXTRACT(MINUTE from base.inflow_timestamp) <= 5 then '01. Min 0 - 5'
when EXTRACT(MINUTE from base.inflow_timestamp) <= 10 then '02. Min 5 - 10'
when EXTRACT(MINUTE from base.inflow_timestamp) <= 15 then '03. Min 10 - 15'
when EXTRACT(MINUTE from base.inflow_timestamp) <= 20 then '04. Min 15 - 20'
when EXTRACT(MINUTE from base.inflow_timestamp) <= 25 then '05. Min 20 - 25'
when EXTRACT(MINUTE from base.inflow_timestamp) <= 30 then '06. Min 25 - 30'
when EXTRACT(MINUTE from base.inflow_timestamp) <= 35 then '07. Min 30 - 35'
when EXTRACT(MINUTE from base.inflow_timestamp) <= 40 then '08. Min 35 - 40'
when EXTRACT(MINUTE from base.inflow_timestamp) <= 45 then '09. Min 40 - 45'
when EXTRACT(MINUTE from base.inflow_timestamp) <= 50 then '10. Min 45 - 50'
when EXTRACT(MINUTE from base.inflow_timestamp) <= 55 then '11. Min 50 - 55'
when EXTRACT(MINUTE from base.inflow_timestamp) <= 60 then '12. Min 55 - 60'
else null end inflow_minute_range

,base.is_asap
,case when base.is_stack = 0 then base.delivery_distance
when base.is_stack = 1 then base.overall_distance * 1.0000/base.total_order_in_group
else null end as adjusted_distance
,base.delivery_distance distance
,case when base.delivery_distance <= 1 then 28
when base.delivery_distance > 1 then least(60,28 + 5*(ceiling(base.delivery_distance) -1))
else null end as lt_sla
-- ,case when base.delivery_distance <= 1 then date_add('minute',30,base.created_timestamp)
-- when base.delivery_distance > 1 then date_add('minute',least(60,30 + 5*(ceiling(base.delivery_distance) -1)),base.created_timestamp)
-- else null end as delivered_sla_timestamp

,base.group_stack_min_created_timestamp
,base.group_stack_max_last_delivered_timestamp

,case when base.first_auto_assign_timestamp < base.last_incharge_timestamp then 1 else 0 end as is_valid_incharge
,case when base.created_timestamp <= base.last_delivered_timestamp then 1 else 0 end as is_valid_submit_to_del
,case when base.created_timestamp <= base.estimated_delivered_time then 1 else 0 end as is_valid_submit_to_eta

,date_diff('second',base.first_auto_assign_timestamp,base.last_incharge_timestamp)*1.0000/60 as lt_incharge
,date_diff('second',base.created_timestamp,base.last_delivered_timestamp)*1.0000/60 as lt_completion
,date_diff('second',base.created_timestamp,base.estimated_delivered_time)*1.0000/60 as lt_eta

,case when base.last_delivered_timestamp > base.estimated_delivered_time then 1 else 0 end as is_late_delivered_time
,case when base.max_arrived_at_buyer_timestamp > base.estimated_delivered_time then 1 else 0 end as is_late_arrive_buyer
,date_diff('second',base.estimated_delivered_time,base.last_delivered_timestamp) lt_from_promise_to_actual_delivered


,date_diff('second',base.first_auto_assign_timestamp,base.max_arrived_at_merchant_timestamp)*1.0000/60 as lt_assign_to_arrive_at_merchant
,date_diff('second',base.last_incharge_timestamp,base.max_arrived_at_merchant_timestamp)*1.0000/60 as lt_incharge_to_arrive_at_merchant
,date_diff('second',base.last_picked_timestamp ,base.max_arrived_at_buyer_timestamp)*1.0000/60 as lt_pick_to_arrive_at_buyer
,date_diff('second',base.max_arrived_at_buyer_timestamp ,base.last_delivered_timestamp)*1.0000/60 as lt_arrive_at_buyer_to_del
,date_diff('second',base.max_arrived_at_merchant_timestamp ,base.last_picked_timestamp)*1.0000/60 as lt_arrive_at_merchant_to_pick

,case when base.first_auto_assign_timestamp <= base.max_arrived_at_merchant_timestamp then 1 else 0 end as is_valid_lt_arrive_at_merchant
,case when base.last_incharge_timestamp <= base.max_arrived_at_merchant_timestamp then 1 else 0 end as is_valid_lt_incharge_arrive_at_merchant
,case when base.last_picked_timestamp <= base.max_arrived_at_buyer_timestamp then 1 else 0 end as is_valid_lt_arrive_at_buyer
,case when base.max_arrived_at_buyer_timestamp <= base.last_delivered_timestamp then 1 else 0 end as is_valid_lt_arrive_at_buyer_to_del
,case when base.max_arrived_at_merchant_timestamp <= base.last_picked_timestamp then 1 else 0 end as is_valid_lt_arrive_at_merchant_to_pick
,case when base.confirm_timestamp <= base.pick_timestamp then 1 else 0 end as is_valid_lt_merchant_prep

,base.hub_id
,base.pick_hub_id

,hub_info.hub_name
,hub_info.hub_location

,pick_hub_info.pick_hub_name
,pick_hub_info.pick_hub_location

,base.is_hub_driver
,case when (base.driver_payment_policy = 3) or (base.driver_payment_policy = 1 and (EXTRACT(HOUR from base.last_incharge_timestamp) <=7 or EXTRACT(HOUR from base.last_incharge_timestamp) >= 22 )) then 0 else 1 end as is_order_in_hub_shift

,base.shipper_rating
,base.shipping_fee
,base.merchant_id
,base.merchant_name
,base.confirm_timestamp
,base.pick_timestamp
,coalesce(base.lt_merchant_prep*1.00000000/60,0) merchant_prep_time_actual
FROM
(
SELECT dot.uid as shipper_id
,dot.ref_order_id as order_id
,dot.ref_order_code as order_code
,dot.ref_order_category
,case when dot.ref_order_category = 0 then 'order_delivery'
when dot.ref_order_category = 3 then 'now_moto'
when dot.ref_order_category = 4 then 'now_ship'
when dot.ref_order_category = 5 then 'now_ship'
when dot.ref_order_category = 6 then 'now_ship_shopee'
when dot.ref_order_category = 7 then 'now_ship_sameday'
else null end source
,dot.ref_order_status
,dot.order_status
,case when dot.order_status = 1 then 'Pending'
when dot.order_status in (100,101,102) then 'Assigning'
when dot.order_status in (200,201,202,203,204) then 'Processing'
when dot.order_status in (300,301) then 'Error'
when dot.order_status in (400,401,402,403,404,405,406,407) then 'Completed'
else null end as order_status_group

,case when dot.group_id > 0 then 1 else 0 end as is_stack
,ogi.group_code
,ogm.group_id

,dot.is_asap
,ogi.distance*1.0000/(100*1000) overall_distance
,dot.delivery_distance*1.0000/1000 delivery_distance


,case when dot.ref_order_status in (7,9,11) and dot.real_drop_time > 0 then date(from_unixtime(dot.real_drop_time - 60*60)) else date(from_unixtime(dot.submitted_time- 60*60)) end as report_date
,date(from_unixtime(dot.submitted_time- 60*60)) created_date
,from_unixtime(dot.submitted_time- 60*60) created_timestamp
,case when cast(from_unixtime(dot.submitted_time - 60*60) as date) between DATE('2018-12-31') and DATE('2018-12-31') then 201901
when cast(from_unixtime(dot.submitted_time - 60*60) as date) between DATE('2019-12-30') and DATE('2019-12-31') then 202001
when cast(from_unixtime(dot.submitted_time - 60*60) as date) between DATE('2021-01-01') and DATE('2021-01-03') then 202053
else YEAR(cast(from_unixtime(dot.submitted_time - 60*60) as date))*100 + WEEK(cast(from_unixtime(dot.submitted_time - 60*60) as date)) end as created_year_week
,concat(cast(YEAR(from_unixtime(dot.submitted_time - 60*60)) as VARCHAR),'-',date_format(from_unixtime(dot.submitted_time - 60*60),'%b')) as created_year_month

,case when dot.real_drop_time = 0 then null else from_unixtime(dot.real_drop_time - 60*60) end as last_delivered_timestamp
,case when dot.estimated_drop_time = 0 then null else from_unixtime(dot.estimated_drop_time - 60*60) end as estimated_delivered_time
,fa.first_auto_assign_timestamp
,fa.last_incharge_timestamp
,fa.last_picked_timestamp
,case when arrive.max_arrived_at_merchant_timestamp is not null then arrive.max_arrived_at_merchant_timestamp else fa.last_picked_timestamp end as max_arrived_at_merchant_timestamp
,case when arrive.max_arrived_at_buyer_timestamp is not null then arrive.max_arrived_at_buyer_timestamp
when dot.real_drop_time = 0 then null else from_unixtime(dot.real_drop_time - 60*60) end as max_arrived_at_buyer_timestamp
,case when dot.is_asap = 0 then fa.first_auto_assign_timestamp else from_unixtime(dot.submitted_time- 60*60) end as inflow_timestamp

,order_rank.min_created_timestamp as group_stack_min_created_timestamp
,order_rank.max_last_delivered_timestamp as group_stack_max_last_delivered_timestamp
,COALESCE(order_rank.total_order_in_group,0) total_order_in_group

,district.name_en as district_name
,case when dot.pick_city_id = 238 THEN 'Dien Bien' else city.city_name end as city_name
,case when dot.pick_city_id = 217 then '1. HCM'
when dot.pick_city_id = 218 then '2. HN'
when dot.pick_city_id = 219 then '3. DN'
ELSE '4. OTH' end as city_group

,dot.pick_city_id as city_id
,dot.pick_district_id as district_id

,COALESCE(cast(json_extract(dotet.order_data,'$.hub_id') as BIGINT ),0) as hub_id
,COALESCE(cast(json_extract(dotet.order_data,'$.pick_hub_id') as BIGINT ),0) as pick_hub_id
,case when driver_hub.shipper_type_id = 12 then 1 else 0 end as is_hub_driver
,COALESCE(srate.shipper_rating,5) shipper_rating
,COALESCE(sf.shipping_fee,0) shipping_fee
,cast(json_extract(dotet.order_data,'$.shipper_policy.type') as bigint) as driver_payment_policy
,sf.merchant_id
,sf.merchant_name
,from_unixtime(go.confirm_timestamp) confirm_timestamp
,from_unixtime(go.pick_timestamp) pick_timestamp
,date_diff('second',from_unixtime(go.confirm_timestamp - 60*60),from_unixtime(go.pick_timestamp - 60*60)) lt_merchant_prep
FROM foody.foody_partner_db__driver_order_tab dot
left join (select * from shopeefood.foody_mart__fact_gross_order_join_detail where grass_region = 'VN') go on go.id = dot.ref_order_id and dot.ref_order_category = 0
left join foody.foody_partner_db__driver_order_extra_tab dotet on dot.id = dotet.order_id
LEFT JOIN
(SELECT *

FROM foody.foody_partner_db__order_group_mapping_tab
WHERE grass_schema = 'foody_partner_db'

)ogm on dot.group_id = ogm.group_id and dot.ref_order_id = ogm.ref_order_id and ogm.mapping_status = 11 and ogm.ref_order_category = dot.ref_order_category

LEFT JOIN
(SELECT *

FROM foody.foody_partner_db__order_group_mapping_tab
WHERE grass_schema = 'foody_partner_db'

)ogm_filter on dot.group_id = ogm.group_id and dot.ref_order_id = ogm_filter.ref_order_id and ogm_filter.mapping_status = 11
and ogm_filter.ref_order_category = dot.ref_order_category
and ogm_filter.create_time > ogm.create_time
LEFT JOIN
(SELECT *

FROM foody.foody_partner_db__order_group_info_tab
WHERE grass_schema = 'foody_partner_db'
)ogi on ogi.id = ogm.group_id

LEFT JOIN

(SELECT order_id
,max(case when destination_key = 256 then from_unixtime(create_time - 60*60) else null end) max_arrived_at_merchant_timestamp
,max(case when destination_key = 512 then from_unixtime(create_time - 60*60) else null end) max_arrived_at_buyer_timestamp

FROM foody.foody_partner_db__driver_order_arrive_log_tab doal

WHERE 1=1
and grass_schema = 'foody_partner_db'
group by 1
)arrive on dot.id = arrive.order_id

left join (SELECT city_id
,city_name

from shopeefood.foody_mart__fact_gross_order_join_detail
where from_unixtime(create_timestamp) between date(cast(now() - interval '30' day as TIMESTAMP)) and date(cast(now() - interval '1' hour as TIMESTAMP))
and grass_region = 'VN'
GROUP BY city_id
,city_name
)city on city.city_id = dot.pick_city_id

Left join foody.foody_delivery_db__district_tab district on district.id = dot.pick_district_id

LEFT JOIN
(SELECT order_id
,shipper_uid as shipper_id
,case when cfo.shipper_rate = 0 then null
when cfo.shipper_rate = 1 or cfo.shipper_rate = 101 then 1
when cfo.shipper_rate = 2 or cfo.shipper_rate = 102 then 2
when cfo.shipper_rate = 3 or cfo.shipper_rate = 103 then 3
when cfo.shipper_rate = 104 then 4
when cfo.shipper_rate = 105 then 5
else null end as shipper_rating
,from_unixtime(cfo.create_time - 60*60) as create_ts

FROM foody.foody_user_activity_db__customer_feedback_order_tab cfo
)srate ON dot.ref_order_id = srate.order_id and dot.uid = srate.shipper_id


LEFT JOIN
(SELECT ogm.group_id
,ogi.group_code
,min(dot.created_timestamp) as min_created_timestamp
,min(dot.last_picked_timestamp) as min_last_picked_timestamp
,max(dot.last_delivered_timestamp) as max_last_delivered_timestamp
,count (distinct dot.ref_order_id) as total_order_in_group
FROM
(
SELECT dot.uid as shipper_id
,dot.ref_order_id
,dot.ref_order_code
,dot.ref_order_category
,case when dot.ref_order_category = 0 then 'order_delivery'
when dot.ref_order_category = 3 then 'now_moto'
when dot.ref_order_category = 4 then 'now_ship'
when dot.ref_order_category = 5 then 'now_ship'
when dot.ref_order_category = 6 then 'now_ship_shopee'
when dot.ref_order_category = 7 then 'now_ship_sameday'
else null end source
,dot.ref_order_status
,dot.group_id
,case when dot.group_id > 0 then 1 else 0 end as is_stack
,dot.delivery_distance*1.0000/1000 delivery_distance
,from_unixtime(dot.submitted_time - 60*60) created_timestamp
,from_unixtime(dot.real_drop_time - 60*60) last_delivered_timestamp
,from_unixtime(dot.real_pick_time - 60*60) last_picked_timestamp
,dot.is_asap
,case when dot.is_asap = 0 and dot.ref_order_status in (7,11) then date(from_unixtime(dot.real_drop_time - 60*60)) else date(from_unixtime(dot.submitted_time- 60*60)) end as report_date
,date(from_unixtime(dot.submitted_time- 60*60)) created_date

FROM foody.foody_partner_db__driver_order_tab dot

WHERE 1=1
and grass_schema = 'foody_partner_db'
)dot

LEFT JOIN
(SELECT *

FROM foody.foody_partner_db__order_group_mapping_tab
WHERE grass_schema = 'foody_partner_db'

)ogm on dot.group_id = ogm.group_id and dot.ref_order_id = ogm.ref_order_id and ogm.mapping_status = 11 and ogm.ref_order_category = dot.ref_order_category

LEFT JOIN
(SELECT *

FROM foody.foody_partner_db__order_group_mapping_tab
WHERE grass_schema = 'foody_partner_db'

)ogm_filter on dot.group_id = ogm.group_id and dot.ref_order_id = ogm_filter.ref_order_id and ogm_filter.mapping_status = 11
and ogm_filter.ref_order_category = dot.ref_order_category
and ogm_filter.create_time > ogm.create_time
LEFT JOIN
(SELECT *

FROM foody.foody_partner_db__order_group_info_tab
WHERE grass_schema = 'foody_partner_db'
)ogi on ogi.id = ogm.group_id
WHERE 1=1
and ogm.group_id is not null
and ogm_filter.create_time is null

GROUP BY 1,2
)order_rank on order_rank.group_id = ogm.group_id

LEFT JOIN
(
SELECT order_id , 0 as order_type
,min(case when status = 21 then cast(from_unixtime(create_time) as TIMESTAMP) - interval '1' hour else null end) as first_auto_assign_timestamp
,max(case when status = 11 then cast(from_unixtime(create_time) as TIMESTAMP) - interval '1' hour else null end) as last_incharge_timestamp
,max(case when status = 6 then cast(from_unixtime(create_time) as TIMESTAMP) - interval '1' hour else null end) as last_picked_timestamp
from foody.foody_order_db__order_status_log_tab
where 1=1
and grass_schema = 'foody_order_db'
group by 1,2

UNION

SELECT ns.order_id, ns.order_type ,min(from_unixtime(create_time - 60*60)) first_auto_assign_timestamp
,max(case when status in (3,4) then cast(from_unixtime(update_time) as TIMESTAMP) - interval '1' hour else null end) as last_incharge_timestamp
,max(case when status in (3,4) then cast(from_unixtime(update_time) as TIMESTAMP) - interval '1' hour else null end) as last_picked_timestamp
FROM
( SELECT order_id, order_type , create_time , update_time, status

from foody.foody_partner_db__order_assign_shipper_log_archive_tab
where order_type in (4,5,6,7) -- now ship/ns shopee/ ns same day
and schema = 'foody_partner_db'
UNION

SELECT order_id, order_type, create_time , update_time, status

from foody.foody_partner_db__order_assign_shipper_log_tab
where order_type in (4,5,6,7) -- now ship/ns shopee/ ns same day
and schema = 'foody_partner_db'
)ns
GROUP BY 1,2
)fa on dot.ref_order_id = fa.order_id and dot.ref_order_category = fa.order_type


-----
LEFT JOIN
(
SELECT go.id as order_id , 0 as order_type
,go.delivery_cost_amount as shipping_fee
,mpm.merchant_id
,mpm.merchant_name
from shopeefood.foody_mart__fact_gross_order_join_detail go
left join shopeefood.foody_mart__profile_merchant_master mpm on go.merchant_id = mpm.merchant_id and mpm.grass_date = 'current'
where 1=1
and go.grass_region = 'VN'
group by 1,2,3,4,5

UNION

SELECT ns.id as order_id
,case when ns.booking_type = 2 and ns.booking_service_type = 1 then 4
when ns.booking_type = 3 and ns.booking_service_type = 1 then 5
when ns.booking_type = 4 and ns.booking_service_type = 1 then 6
when ns.booking_type = 2 and ns.booking_service_type = 2 then 7
else 10 end as order_type
,ns.shipping_fee*1.00/100 as shipping_fee
,0 as merchant_id
,'' as merchant_name
FROM
(SELECT id,concat('now_ship_',cast(id as VARCHAR)) as uid, booking_type,shipper_id, distance,code,create_time, status, payment_method,'now_ship' as original_source,city_id,cast(json_extract(extra_data,'$.pick_address_info.district_id') as DOUBLE) as district_id , pick_real_time,drop_real_time,shipping_fee
,booking_service_type
from foody.foody_express_db__booking_tab
where is_deleted = 0

UNION

SELECT id,concat('now_ship_shopee_',cast(id as VARCHAR)) as uid, 4 as booking_type, shipper_id,distance,code,create_time,status,1 as payment_method,'now_ship_shopee' as original_source,city_id,cast(json_extract(extra_data,'$.sender_info.district_id') as DOUBLE) as district_id, pick_real_time,drop_real_time,shipping_fee
,booking_service_type
from foody.foody_express_db__shopee_booking_tab

)ns
GROUP BY 1,2,3,4,5
)sf on dot.ref_order_id = sf.order_id and dot.ref_order_category = sf.order_type


LEFT JOIN
(
SELECT sm.shipper_id
,sm.shipper_type_id
,case when sm.grass_date = 'current' then date(current_date)
else cast(sm.grass_date as date) end as report_date

from shopeefood.foody_mart__profile_shipper_master sm

where 1=1
and shipper_type_id <> 3
and shipper_status_code = 1
and grass_region = 'VN'
GROUP BY 1,2,3
)driver_hub on driver_hub.shipper_id = dot.uid and driver_hub.report_date = case when dot.is_asap = 0 and dot.ref_order_status in (7,9,11) and dot.real_drop_time > 0 then date(from_unixtime(dot.real_drop_time - 60*60))
when dot.is_asap = 1 and dot.ref_order_status in (7,9,11) and dot.real_drop_time > 0 then date(from_unixtime(dot.real_drop_time - 60*60))
else date(from_unixtime(dot.submitted_time- 60*60)) end



WHERE 1=1
and ogm_filter.create_time is null
and dot.pick_city_id <> 238
and dot.grass_schema = 'foody_partner_db'

)base


LEFT JOIN
(
SELECT id, hub_name
,case when city_id = 217 then 'HCM'
when city_id = 218 then 'HN'
when city_id = 219 then 'DN'
ELSE 'OTH' end as hub_location
FROM foody.foody_internal_db__shipper_hub_info_tab

WHERE 1=1
and id <> 2
and driver_count > 0
and grass_schema = 'foody_internal_db'

)hub_info on hub_info.id = base.hub_id

LEFT JOIN
(
SELECT id, hub_name as pick_hub_name
,case when city_id = 217 then 'HCM'
when city_id = 218 then 'HN'
when city_id = 219 then 'DN'
ELSE 'OTH' end as pick_hub_location
FROM foody.foody_internal_db__shipper_hub_info_tab

WHERE 1=1
and id <> 2
and driver_count > 0
and grass_schema = 'foody_internal_db'

)pick_hub_info on pick_hub_info.id = base.pick_hub_id

WHERE 1=1
-- and base.created_date >= date('2021-03-29')
-- and base.created_date <= date('2021-05-09')
and base.order_status_group = 'Completed'

)base1

---rain
LEFT JOIN
(
SELECT base.id
,base.city_id
,base.district_id
,base.weather
,base.is_rain_negative
,base.create_time as start_time
,base.running_time
,base.end_time


from
(SELECT all.id
,all.city_id
,all.district_id
,all.weather
,all.create_time
,date_diff('second',all.create_time,next_call.create_time) as running_time
,next_call.create_time as end_time
,case when all.weather in ('Rain','Thundershower','Heavy thunderstorm','Thunderstorm',
'Heavy rain','Rain shower','Heavy rain shower','A shower') then 1 else 0 end as is_rain_negative



from
(SELECT adt.id
,adt.city_id
,adt.district_id
,trim(replace(cast(json_extract(adt.weather_data,'$[0].WeatherText') as VARCHAR),'"')) as weather
,cast(json_extract(adt.weather_data,'$[0].HasPrecipitation') as VARCHAR) as is_rain

,from_unixtime(adt.query_time - 60*60) as query_time
,from_unixtime(adt.create_time - 60*60) as create_time


from foody.foody_geo_db__accuweather_data_tab adt


where 1=1
and date(from_unixtime(adt.create_time - 60*60)) between date('2021-03-01') and date(now()) - interval '1' day
)all

LEFT JOIN (SELECT id
,city_id
,district_id
,trim(replace(cast(json_extract(weather_data,'$[0].WeatherText') as VARCHAR),'"')) as weather
,cast(json_extract(weather_data,'$[0].HasPrecipitation') as VARCHAR) as is_rain
,from_unixtime(query_time - 60*60) as query_time
,from_unixtime(create_time - 60*60) as create_time


from foody.foody_geo_db__accuweather_data_tab
where 1=1

and date(from_unixtime(create_time - 60*60)) between date('2021-03-01') and date(now()) - interval '1' day

)next_call on next_call.city_id = all.city_id and next_call.district_id = all.district_id and next_call.create_time > all.create_time
and next_call.create_time < all.create_time + interval '1' hour

LEFT JOIN (SELECT id
,city_id
,district_id
,trim(replace(cast(json_extract(weather_data,'$[0].WeatherText') as VARCHAR),'"')) as weather
,cast(json_extract(weather_data,'$[0].HasPrecipitation') as VARCHAR) as is_rain
,from_unixtime(query_time - 60*60) as query_time
,from_unixtime(create_time - 60*60) as create_time


from foody.foody_geo_db__accuweather_data_tab
where 1=1
and date(from_unixtime(create_time - 60*60)) between date('2021-03-01') and date(now()) - interval '1' day

)next_call_filter on next_call_filter.city_id = all.city_id and next_call_filter.district_id = all.district_id
and next_call_filter.create_time > all.create_time
and next_call_filter.create_time < all.create_time + interval '1' hour
and next_call_filter.create_time < next_call.create_time


where 1=1
and next_call_filter.id is null

)base


where base.running_time is not null
)rain_mode on rain_mode.city_id = base1.city_id and rain_mode.district_id = base1.district_id and base1.created_timestamp >= rain_mode.start_time and base1.created_timestamp < rain_mode.end_time

)base2
where source = 'NowFood'
and order_status = 'Delivered'
--and is_late_sla = 1
and is_asap = 1
and base2.created_date >= date((current_date) - interval '15' day)
and base2.created_date < date(current_date)
group by 1,2,3,4)